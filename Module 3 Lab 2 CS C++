Code 1 Sliding Subarray Beautyyy
You are given an array of integers arr and an integer k. Your task is to find the given n th position of the smallest integer in each contiguous subarray of size k and print these smallest integers. A subarray is a contiguous non-empty sequence of elements within the original array. For each subarray of size k, you need to find the given n th position of the smallest integer within that subarray. The given n th position of the smallest integer in a subarray is the integer that appears at the given n th position when the subarray is sorted in ascending order. . Your task is to return an integer array containing n - k + 1 elements, denoting the beauty of the subarrays in order from the first index in the array.


Exercise-2

Input:
1 2 3 4 5 6 7 8 9 10
4
2

Output:
2 3 4 5 6 7 8


##CODE
https://leetcode.com/problems/sliding-subarray-beauty/description/


Code 2 No Prefix Set
You are given a list of passwords, where each password consists of lowercase letters from 'a' to 'z' inclusive. The set of passwords is said to be a 'GOOD PASSWORD' if no password is a prefix of another password in the set, except for identical passwords (which are considered prefixes of each other). In this case, print 'GOOD PASSWORD'. Otherwise, print 'BAD PASSWORD' on the first line, followed by the first pair of passwords where one password is a prefix of the other. Consider the following list of words: ['apple', 'banana', 'application', 'bananas']. In this case, the word 'banana' is a prefix of 'bananas'.

So we would print: 'BAD PASSWORD'

Now let's take another example with a different set of words: ['cat', 'dog', 'elephant']. In this scenario, none of the strings are prefixes of each other.

Therefore, we can conclude that: GOOD PASSWORD

Exercise-1

Input:
abc zxy pqr

Output:
GOOD PASSWORD
Exercise-2

Input:
abc abczxy abcpqr

Output:
BAD PASSWORD



CODE
#include <iostream>
#include <vector>
#include <string>
using namespace std;
bool isBadPassword(const vector<string>& passwords) {
    for (int i = 0; i < passwords.size(); i++) {
        for (int j = i + 1; j < passwords.size(); j++) {
            if (passwords[i].find(passwords[j]) == 0 || passwords[j].find(passwords[i]) == 0) {
                return true; // Found a prefix relationship
            }
        }
    }
    return false; // No prefix relationships found
}

int main() {
    vector<string> passwords;
   string input;

    // Read input as a list of space-separated passwords
    while (cin >> input) {
        passwords.push_back(input);
    }

    if (isBadPassword(passwords)) {
       cout << "BAD PASSWORD" << endl;
    } else {
        cout << "GOOD PASSWORD" << endl;
    }

    return 0;
}
